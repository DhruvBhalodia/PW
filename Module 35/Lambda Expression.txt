1. What is the lambda expression of Java 8?  
   A lambda expression is a concise way to represent a functional interface using an anonymous method.  
   Syntax:  
   (parameters) -> {body}

2. Can you pass lambda expressions to a method? When?  
   Yes, lambda expressions can be passed to a method if the method accepts a functional interface as a parameter.  
   Example:  
   interface Printer {
       void print(String message);
   }
   public class Main {
       public static void main(String[] args) {
           Printer printer = (msg) -> System.out.println(msg); 
           printMessage("Hello, Lambda!", printer);
       }
       static void printMessage(String msg, Printer printer) {
           printer.print(msg);
       }
   }
   

3. What is the functional interface in Java 8?  
   A functional interface is an interface with a single abstract method (SAM). It can have default or static methods.  
   Example: Runnable, Callable, or custom annotated with @FunctionalInterface.

4. Why do we use lambda expressions in Java?  
   Lambda expressions simplify code, make it more readable, and enable functional programming by reducing boilerplate for anonymous classes.

5. Is it mandatory for a lambda expression to have parameters?  
   No, it is not mandatory. If no parameters are required, parentheses are empty.  
   Example:  
   Runnable r = () -> System.out.println("No parameters!");
   r.run();
     