1. What is an interface in Java?  
   An interface in Java is a blueprint for a class that contains abstract methods (by default) and static constants. It is used to achieve abstraction and multiple inheritance.

2. Which modifiers are allowed for methods in an interface? Explain with an example.  
   - Methods in an interface can have the following modifiers: public, abstract, default, static, private (from Java 9 onward).  
   Example:  
   interface Example {
       public abstract void method1(); 
       default void method2() { 
           System.out.println("Default method");
       }
       static void method3() { 
           System.out.println("Static method");
       }
   }

3. What is the use of an interface in Java? Or, why do we use an interface in Java?  
   Interfaces are used to:  
   - Define a contract that classes must follow.  
   - Achieve multiple inheritance.  
   - Provide abstraction and decouple code for flexibility.

4. What is the difference between an abstract class and an interface in Java?  
   - Abstract classes can have constructors, interfaces cannot.
   - Abstract classes can include non-abstract methods, interfaces had only abstract methods before Java 8.
   - Abstract classes support single inheritance, interfaces support multiple inheritance.
   - Abstract classes can have instance variables, interfaces only have static constants.
   - Abstract classes use extends, interfaces use implements.